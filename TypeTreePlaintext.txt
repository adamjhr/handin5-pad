i) This is polymorphic since the argument is never used. Type: a -> int

                                                   p1(f) = Va, a -> int                p1(f) = Va, a -> int
                                                 --------------------------(p3)    -------------------------(p3)
                                                     p1 |- f: a -> int              p1 |- f: a
------------------------------------(p1)         ----------------------------------------------------------(p9)
[x |-> tx, f |-> tx -> int] |- 1 : int              p1[f |-> Va, a -> int] |- f f :int
------------------------------------------------------------------------------------------------------(p8)
                                [] |- let f x = 1 in f f end : int




ii) this is not polymorphic since the argument is used. Type int -> int

                                                                -------(p1) --------(p1)
                                                                  x: int     1: int
----(p1)  ----(p1)                                                -----------------(p4)
x: int   10: int                             p1 |- f: int -> int        x+1
-----------------(p5)  --------------(p1)  --------------------------------(p9)
p1 |- x<10 : bool       p1 |- 42 : int     p1 |- f(x+1)
---------------------------------------------------------
p1[x |-> tx, f |-> tx ->] if x<10 then 42 else f(x+1)                                       [f |-> ????] f 20
---------------------------------------------------------------------------------------------------------------------(p8)
                        [] |- let f x = if x<10 then 42 else f(x+1) in f 20 end